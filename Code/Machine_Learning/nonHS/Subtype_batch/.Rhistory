# Load, tag, and process HS data
Metrics_HS_Subtype <- read_csv("F:/ML/HS/Subtype_batch/output/tables/Metrics_HS_Subtype.csv") %>%
mutate(data = "HS")
Metrics_nonHS_Subtype <- read_csv("output/tables/Metrics_nonHS_Subtype.csv") %>%
mutate(data = "nonHS")
numeric_cols <- names(Metrics_HS_Subtype)[2:(ncol(Metrics_HS_Subtype) - 1)]
# Combine and clean datasets
mixed_metrics <- bind_rows(
Metrics_nonHS_Subtype %>% mutate(across(all_of(numeric_cols), as.numeric)),
Metrics_HS_Subtype %>% mutate(across(all_of(numeric_cols), as.numeric))
) %>%
mutate(Model = str_replace(Model, "KNN\\(\\d\\)", "KNN"),
data = factor(data, levels = c("nonHS","HS")))
library(ggplot2)
library(ggrepel)
library(ggsci)
library(dplyr)
# Define consistent model palette
model_levels <- unique(mixed_metrics$Model)
model_levels
model_palette <- setNames(
pal_npg("nrc")(length(model_levels)),
model_levels
)
model_palette
# Prepare the data
plot_data_line <- mixed_metrics |>
select(Model, mcc, data) |>
mutate(
mcc = as.numeric(mcc),
Model = factor(Model, levels = model_levels),
data = factor(data, levels = c("nonHS", "HS"))
)
# Plot
lineplot <- ggplot(plot_data_line, aes(x = data, y = mcc, group = Model, color = Model)) +
geom_line(linewidth = 1) +
geom_point(size = 3) +
geom_label_repel(
data = ~filter(.x, data == "HS"),
aes(label = Model),
box.padding = 0.5,
label.size = 0.25,
size = 4,
fontface = "bold",
label.r = unit(0.15, "lines"),
label.padding = unit(0.2, "lines"),
segment.size = 0.1,
nudge_x = 0.1,      # Push right beyond "HS"
hjust = 0,          # Left-align text (anchor to start)
direction = "y",    # Spread labels vertically
show.legend = FALSE
) +
scale_color_manual(values = model_palette) +
scale_y_continuous(limits = c(0.3, 1), breaks = seq(0, 1, 0.05)) +
scale_x_discrete(expand = expansion(mult = c(0.1, 0.5))) +
labs(
title = "Performance on subtype classification",
x = "DEGs",
y = "Performance"
) +
theme_bw(base_size = 15) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.ticks.length = unit(-0.2, "cm"),
panel.grid.major.y = element_line(color = "lightgray", linewidth = 0.2),
panel.grid.minor.y = element_blank()
)
lineplot
ggsave("output/figures/all_models_mcc_boxed_labels.png", lineplot, width = 10, height = 6, dpi = 600, bg = "white")
library(svglite)
ggsave("output/figures/all_models_mcc_boxed_labels.svg", lineplot, device = svglite::svglite, width = 10, height = 6)
library(ggplot2)
library(ggrepel)
library(ggsci)
library(dplyr)
# Define consistent model palette
model_levels <- unique(mixed_metrics_age$Model)
model_levels
model_palette <- setNames(
pal_npg("nrc")(length(model_levels)),
model_levels
)
model_palette
# Prepare the data
plot_data_line <- mixed_metrics |>
select(Model, mcc, data) |>
mutate(
mcc = as.numeric(mcc),
Model = factor(Model, levels = model_levels),
data = factor(data, levels = c("nonHS", "HS"))
)
# Plot
lineplot <- ggplot(plot_data_line, aes(x = data, y = mcc, group = Model, color = Model)) +
geom_line(linewidth = 1) +
geom_point(size = 3) +
geom_label_repel(
data = ~filter(.x, data == "HS"),
aes(label = Model),
box.padding = 0.5,
label.size = 0.25,
size = 4,
fontface = "bold",
label.r = unit(0.15, "lines"),
label.padding = unit(0.2, "lines"),
segment.size = 0.1,
nudge_x = 0.1,      # Push right beyond "HS"
hjust = 0,          # Left-align text (anchor to start)
direction = "y",    # Spread labels vertically
show.legend = FALSE
) +
scale_color_manual(values = model_palette) +
scale_y_continuous(limits = c(0.3, 1), breaks = seq(0, 1, 0.05)) +
scale_x_discrete(expand = expansion(mult = c(0.1, 0.5))) +
labs(
title = "Performance on subtype classification",
x = "DEGs",
y = "Performance"
) +
theme_bw(base_size = 15) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.ticks.length = unit(-0.2, "cm"),
panel.grid.major.y = element_line(color = "lightgray", linewidth = 0.2),
panel.grid.minor.y = element_blank()
)
lineplot
ggsave("output/figures/all_models_mcc_boxed_labels.png", lineplot, width = 10, height = 6, dpi = 600, bg = "white")
library(svglite)
ggsave("output/figures/all_models_mcc_boxed_labels.svg", lineplot, device = svglite::svglite, width = 10, height = 6)
library(patchwork)
comb_MCC <- (lineplot + lineplot_age) +
plot_layout(guides = "collect") &
theme(legend.position = "bottom") &
plot_annotation(tag_levels = 'A')
comb_MCC
library(patchwork)
comb_MCC <- (lineplot + lineplot_age) +
plot_annotation(tag_levels = 'A')
comb_MCC
library(patchwork)
library(svglite)
# Assume lineplot and lineplot_age are defined ggplots
# Combine plots side-by-side or stacked (modify layout if needed)
comb_MCC <- (lineplot + lineplot_age) +
plot_annotation(tag_levels = 'A') &
theme(
axis.title.x = element_text(size = 16, face = "bold")  # Harmonize x-axis title style
)
# If you want a single x-axis label spanning both plots, add this:
comb_MCC <- comb_MCC &
labs(x = "DEGs")  # Set combined x-axis label here
comb_MCC
library(patchwork)
library(svglite)
# Assume lineplot and lineplot_age are defined ggplots
# Combine plots side-by-side or stacked (modify layout if needed)
comb_MCC <- (lineplot + lineplot_age) +
plot_annotation(tag_levels = 'A')
comb_MCC
# Save PNG
ggsave(
filename = "output/figures/comb_MCC.png",
plot = comb_MCC,
width = 10,
height = 6,
dpi = 600,
bg = "white"
)
# Save SVG
ggsave(
filename = "output/figures/comb_MCC.svg",
plot = comb_MCC,
device = svglite::svglite,
width = 10,
height = 6
)
library(patchwork)
library(svglite)
# Assume lineplot and lineplot_age are defined ggplots
# Combine plots side-by-side or stacked (modify layout if needed)
comb_MCC <- (lineplot + lineplot_age) +
plot_annotation(tag_levels = 'A')
comb_MCC
# Save PNG
ggsave(
filename = "output/figures/comb_MCC.png",
plot = comb_MCC,
width = 12,
height = 6,
dpi = 600,
bg = "white"
)
# Save SVG
ggsave(
filename = "output/figures/comb_MCC.svg",
plot = comb_MCC,
device = svglite::svglite,
width = 12,
height = 6
)
library(patchwork)
library(svglite)
# Shared axis labels
comb_MCC <- (lineplot + labs(x = NULL) + lineplot_age + labs(x = NULL, y = NULL)) +
plot_annotation(tag_levels = 'A', bottom = "DEGs")
comb_MCC
# Shared axis labels
comb_MCC <- (lineplot + labs(x = NULL) + lineplot_age + labs(x = NULL, y = NULL)) +
plot_annotation(tag_levels = 'A')
comb_MCC
# Shared axis labels
comb_MCC <- (lineplot + labs(x = NULL) + lineplot_age + labs(x = NULL, y = NULL)) +
plot_annotation(tag_levels = 'A') +   labs(
x = "DEGs",
y = "Performance"
)
comb_MCC
library(patchwork)
library(svglite)
# Shared axis labels
comb_MCC <- (lineplot + lineplot_age + labs(y = NULL)) +
plot_annotation(tag_levels = 'A')
comb_MCC
# Save
ggsave("output/figures/comb_MCC.png", comb_MCC, width = 12, height = 6, dpi = 600, bg = "white")
ggsave("output/figures/comb_MCC.svg", comb_MCC, device = svglite::svglite, width = 12, height = 6)
# Define the vector of package names needed for the project
PACKAGES <- c(
"xgboost",         # Extreme Gradient Boosting algorithm for classification/regression
"ggplot2",         # Data visualization package based on the grammar of graphics
"RColorBrewer",    # Color palettes for enhanced data visualization
"tidymodels",      # Tidy modeling framework for machine learning workflows
"tidyverse",       # Collection of packages for data manipulation, analysis, and visualization
"finetune",        # Tools for model tuning and optimization
"themis",          # Techniques for handling class imbalance in machine learning
"gprofiler2",      # Gene enrichment and pathway analysis for gene lists
"future",          # Enables parallel processing for faster computations
"data.table",      # High-performance data manipulation package
"gt",              # For creating display tables
#"gtsummary",       # For summary tables with statistics and formatted output
"butcher",         # Reduces memory load of models by removing unnecessary objects
"UBL",              # Utility-based learning techniques for imbalanced data
"ranger",
"kernelshap",
"shapviz"
)
# Use purrr::walk to load all packages
purrr::walk(PACKAGES, library, character.only = TRUE)
gc()
plan(multisession, workers = 10)
nbrOfWorkers()
RANDOM_SEED <- 1234
#plan("multisession", workers = 15,)
#plan(multisession, workers = 15)
#plan(sequential)
library(tidyverse)
library(ggrepel)
library(ggsci)
# Load, tag, and process HS data
Metrics_HS_Subtype <- read_csv("F:/ML/HS/Subtype_batch/output/tables/Metrics_HS_Subtype.csv") %>%
mutate(data = "HS")
# Load, tag, and process HS data
Metrics_HS_Subtype <- read_csv("F:/ML/HS/Subtype_batch/output/tables/Metrics_HS_Subtype.csv") %>%
mutate(data = "HS")
Metrics_nonHS_Subtype <- read_csv("output/tables/Metrics_nonHS_Subtype.csv") %>%
mutate(data = "nonHS")
numeric_cols <- names(Metrics_HS_Subtype)[2:(ncol(Metrics_HS_Subtype) - 1)]
# Load, tag, and process HS data
Metrics_HS_Subtype <- vroom::vroom("F:/ML/HS/Subtype_batch/output/tables/Metrics_HS_Subtype.csv") %>%
mutate(data = "HS")
Metrics_nonHS_Subtype <- vroom:vroom("output/tables/Metrics_nonHS_Subtype.csv") %>%
mutate(data = "nonHS")
# Load, tag, and process HS data
Metrics_HS_Subtype <- vroom::vroom("F:/ML/HS/Subtype_batch/output/tables/Metrics_HS_Subtype.csv") %>%
mutate(data = "HS")
Metrics_nonHS_Subtype <- vroom::vroom("output/tables/Metrics_nonHS_Subtype.csv") %>%
mutate(data = "nonHS")
numeric_cols <- names(Metrics_HS_Subtype)[2:(ncol(Metrics_HS_Subtype) - 1)]
# Combine and clean datasets
mixed_metrics <- bind_rows(
Metrics_nonHS_Subtype %>% mutate(across(all_of(numeric_cols), as.numeric)),
Metrics_HS_Subtype %>% mutate(across(all_of(numeric_cols), as.numeric))
) %>%
mutate(Model = str_replace(Model, "KNN\\(\\d\\)", "KNN"),
data = factor(data, levels = c("nonHS","HS")))
# Create plot data
plot_data_line <- mixed_metrics %>%
select(Model, f_meas, UN_mcc, data) %>%
mutate(across(c(f_meas, UN_mcc), as.numeric), Model = factor(Model))
# Generate plot with improved label positioning
line_plot <- ggplot(plot_data_line, aes(f_meas, UN_mcc, color = Model)) +
geom_line(aes(group = Model), linewidth = 1) +
geom_point(aes(shape = data), size = 4) +
geom_text_repel(
data = filter(plot_data_line, data == "HS"),
aes(label = Model),
size = 3.2, seed = 42,
min.segment.length = 0.1,
box.padding = 0.5,
point.padding = 0.3,
force = 3,
force_pull = 0.5,
max.overlaps = Inf,
direction = "both",
show.legend = FALSE
) +
scale_color_npg() +
scale_shape_manual(name = "Data Type", values = c("HS" = 17, "woHS" = 16)) +
labs(title = "Model Performance: F1 vs. MCC (UN) with and without HS Subtype",
x = "F1 Score", y = "MCC (UN)") +
guides(color = "none") +
theme_bw(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
line_plot
library(ggplot2)
library(ggrepel)
library(ggsci)
library(dplyr)
# Define consistent model palette
model_levels <- unique(mixed_metrics_age$Model)
model_levels
model_palette <- setNames(
pal_npg("nrc")(length(model_levels)),
model_levels
)
model_palette
# Prepare the data
plot_data_line <- mixed_metrics |>
select(Model, mcc, data) |>
mutate(
mcc = as.numeric(mcc),
Model = factor(Model, levels = model_levels),
data = factor(data, levels = c("nonHS", "HS"))
)
# Define consistent model palette
model_levels <- unique(mixed_metrics_age$Model)
model_levels
model_palette <- setNames(
pal_npg("nrc")(length(model_levels)),
model_levels
)
model_palette
# Prepare the data
plot_data_line <- mixed_metrics |>
select(Model, mcc, data) |>
mutate(
mcc = as.numeric(mcc),
Model = factor(Model, levels = model_levels),
data = factor(data, levels = c("nonHS", "HS"))
)
library(dplyr)
# Define consistent model palette
model_levels <- unique(mixed_metrics_age$Model)
# Define consistent model palette
model_levels <- unique(mixed_metrics$Model)
model_levels
model_palette <- setNames(
pal_npg("nrc")(length(model_levels)),
model_levels
)
model_palette
# Prepare the data
plot_data_line <- mixed_metrics |>
select(Model, mcc, data) |>
mutate(
mcc = as.numeric(mcc),
Model = factor(Model, levels = model_levels),
data = factor(data, levels = c("nonHS", "HS"))
)
# Plot
lineplot <- ggplot(plot_data_line, aes(x = data, y = mcc, group = Model, color = Model)) +
geom_line(linewidth = 1) +
geom_point(size = 3) +
geom_label_repel(
data = ~filter(.x, data == "HS"),
aes(label = Model),
box.padding = 0.5,
label.size = 0.25,
size = 4,
fontface = "bold",
label.r = unit(0.15, "lines"),
label.padding = unit(0.2, "lines"),
segment.size = 0.1,
nudge_x = 0.1,      # Push right beyond "HS"
hjust = 0,          # Left-align text (anchor to start)
direction = "y",    # Spread labels vertically
show.legend = FALSE
) +
scale_color_manual(values = model_palette) +
scale_y_continuous(limits = c(0.3, 1), breaks = seq(0, 1, 0.05)) +
scale_x_discrete(expand = expansion(mult = c(0.1, 0.5))) +
labs(
title = "Performance on subtype classification",
x = "DEGs",
y = "Performance"
) +
theme_bw(base_size = 15) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.ticks.length = unit(-0.2, "cm"),
panel.grid.major.y = element_line(color = "lightgray", linewidth = 0.2),
panel.grid.minor.y = element_blank()
)
lineplot
model_palette
# Prepare the data
plot_data_line <- mixed_metrics |>
select(Model, mcc,f_meas,UN_mcc, data) |>
mutate(
mcc = as.numeric(mcc),
Model = factor(Model, levels = model_levels),
data = factor(data, levels = c("nonHS", "HS")),
composite_score = sqrt(f_meas * UN_mcc)
)
# Plot
lineplot <- ggplot(plot_data_line, aes(x = data, y = composite_score, group = Model, color = Model)) +
geom_line(linewidth = 1) +
geom_point(size = 3) +
geom_label_repel(
data = ~filter(.x, data == "HS"),
aes(label = Model),
box.padding = 0.5,
label.size = 0.25,
size = 4,
fontface = "bold",
label.r = unit(0.15, "lines"),
label.padding = unit(0.2, "lines"),
segment.size = 0.1,
nudge_x = 0.1,      # Push right beyond "HS"
hjust = 0,          # Left-align text (anchor to start)
direction = "y",    # Spread labels vertically
show.legend = FALSE
) +
scale_color_manual(values = model_palette) +
scale_y_continuous(limits = c(0.3, 1), breaks = seq(0, 1, 0.05)) +
scale_x_discrete(expand = expansion(mult = c(0.1, 0.5))) +
labs(
title = "Performance on subtype classification",
x = "DEGs",
y = "Performance"
) +
theme_bw(base_size = 15) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.ticks.length = unit(-0.2, "cm"),
panel.grid.major.y = element_line(color = "lightgray", linewidth = 0.2),
panel.grid.minor.y = element_blank()
)
lineplot
ggsave("output/figures/all_models_mcc_boxed_labels2.png", lineplot, width = 10, height = 6, dpi = 600, bg = "white")
lineplot
plot_data_line <- mixed_metrics |>
select(Model, mcc,f_meas,UN_mcc, data) |>
mutate(
mcc = as.numeric(mcc),
Model = factor(Model, levels = model_levels),
data = factor(data, levels = c("nonHS", "HS")),
composite_score = (f_meas * UN_mcc)
)
# Plot
lineplot <- ggplot(plot_data_line, aes(x = data, y = composite_score, group = Model, color = Model)) +
geom_line(linewidth = 1) +
geom_point(size = 3) +
geom_label_repel(
data = ~filter(.x, data == "HS"),
aes(label = Model),
box.padding = 0.5,
label.size = 0.25,
size = 4,
fontface = "bold",
label.r = unit(0.15, "lines"),
label.padding = unit(0.2, "lines"),
segment.size = 0.1,
nudge_x = 0.1,      # Push right beyond "HS"
hjust = 0,          # Left-align text (anchor to start)
direction = "y",    # Spread labels vertically
show.legend = FALSE
) +
scale_color_manual(values = model_palette) +
scale_y_continuous(limits = c(0.3, 1), breaks = seq(0, 1, 0.05)) +
scale_x_discrete(expand = expansion(mult = c(0.1, 0.5))) +
labs(
title = "Performance on subtype classification",
x = "DEGs",
y = "Performance"
) +
theme_bw(base_size = 15) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.ticks.length = unit(-0.2, "cm"),
panel.grid.major.y = element_line(color = "lightgray", linewidth = 0.2),
panel.grid.minor.y = element_blank()
)
lineplot
lineplot
ggsave("output/figures/all_models_mcc_boxed_labels3.png", lineplot, width = 10, height = 6, dpi = 600, bg = "white")
