scale_fill_npg() +
geom_text_repel(aes(label = Model), size = 4, seed = 1234) +  # Labels next to dots
labs(title = "F1 Score vs. Matthews Correlation Coefficient (UN)",
x = "F1 Score",
y = "MCC (UN)") +
theme_bw(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Show plot
print(HS_scatter)
# Optional: Save to file
ggsave("output/figures/HS_scatter_F1_vs_MCC.png", plot = HS_scatter, width = 10, height = 8, dpi = 600, bg = "white")
library(ggplot2)
library(ggrepel)  # For non-overlapping text labels
# Select only the columns we need
plot_data_scatter <- all_metrics %>%
select(Model, f_meas, UN_mcc)
# Create the scatter plot
HS_scatter <- ggplot(plot_data_scatter, aes(x = f_meas, y = UN_mcc, color = Model)) +
geom_point(size = 4) +
scale_color_npg() +  # from ggsci
geom_text_repel(aes(label = Model), size = 4, seed = 1234) +  # Labels next to dots
labs(title = "F1 Score vs. Matthews Correlation Coefficient (UN)",
x = "F1 Score",
y = "MCC (UN)") +
theme_bw(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "none")
# Show plot
print(HS_scatter)
# Optional: Save to file
ggsave("output/figures/HS_scatter_F1_vs_MCC.png", plot = HS_scatter, width = 10, height = 8, dpi = 600, bg = "white")
library(ggplot2)
library(ggrepel)  # For non-overlapping text labels
# Select only the columns we need
plot_data_scatter <- all_metrics %>%
select(Model, f_meas, UN_mcc)
# Create the scatter plot
HS_scatter <- ggplot(plot_data_scatter, aes(x = f_meas, y = UN_mcc, color = Model)) +
geom_point(size = 4) +
scale_color_npg() +  # from ggsci
geom_text_repel(aes(label = Model), size = 4, seed = 1234,nudge_x = 0.5 ) +  # Labels next to dots
labs(title = "F1 Score vs. Matthews Correlation Coefficient (UN)",
x = "F1 Score",
y = "MCC (UN)") +
theme_bw(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "none")
# Show plot
print(HS_scatter)
# Optional: Save to file
ggsave("output/figures/HS_scatter_F1_vs_MCC.png", plot = HS_scatter, width = 10, height = 8, dpi = 600, bg = "white")
library(ggplot2)
library(ggrepel)  # For non-overlapping text labels
# Select only the columns we need
plot_data_scatter <- all_metrics %>%
select(Model, f_meas, UN_mcc)
# Create the scatter plot
HS_scatter <- ggplot(plot_data_scatter, aes(x = f_meas, y = UN_mcc, color = Model)) +
geom_point(size = 4) +
scale_color_npg() +  # from ggsci
geom_text_repel(aes(label = Model), size = 4, seed = 1234,nudge_x = -0.05 ) +  # Labels next to dots
labs(title = "F1 Score vs. Matthews Correlation Coefficient (UN)",
x = "F1 Score",
y = "MCC (UN)") +
theme_bw(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "none")
# Show plot
print(HS_scatter)
# Optional: Save to file
ggsave("output/figures/HS_scatter_F1_vs_MCC.png", plot = HS_scatter, width = 10, height = 8, dpi = 600, bg = "white")
library(ggplot2)
library(ggrepel)  # For non-overlapping text labels
# Select only the columns we need
plot_data_scatter <- all_metrics %>%
select(Model, f_meas, UN_mcc)
# Create the scatter plot
HS_scatter <- ggplot(plot_data_scatter, aes(x = f_meas, y = UN_mcc, color = Model)) +
geom_point(size = 4) +
scale_color_npg() +  # from ggsci
geom_text_repel(aes(label = Model), size = 4, seed = 1234,nudge_x = -0.02 ) +  # Labels next to dots
labs(title = "F1 Score vs. Matthews Correlation Coefficient (UN)",
x = "F1 Score",
y = "MCC (UN)") +
theme_bw(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "none")
# Show plot
print(HS_scatter)
# Optional: Save to file
ggsave("output/figures/HS_scatter_F1_vs_MCC.png", plot = HS_scatter, width = 10, height = 8, dpi = 600, bg = "white")
library(ggplot2)
library(ggrepel)  # For non-overlapping text labels
# Select only the columns we need
plot_data_scatter <- all_metrics %>%
select(Model, f_meas, UN_mcc)
# Create the scatter plot
HS_scatter <- ggplot(plot_data_scatter, aes(x = f_meas, y = UN_mcc, color = Model)) +
geom_point(size = 4) +
scale_color_npg() +  # from ggsci
geom_text_repel(aes(label = Model), size = 4, seed = 1234,nudge_x = -0.03 ) +  # Labels next to dots
labs(title = "F1 Score vs. Matthews Correlation Coefficient (UN)",
x = "F1 Score",
y = "MCC (UN)") +
theme_bw(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "none")
# Show plot
print(HS_scatter)
# Optional: Save to file
ggsave("output/figures/HS_scatter_F1_vs_MCC.png", plot = HS_scatter, width = 10, height = 8, dpi = 600, bg = "white")
library(xgboost)
library(kernelshap)
library(shapviz)
# Extract fitted xgboost model
XGB <- extract_fit_engine(xgb_fit)
# Prepare predictor matrix (same as used in model fitting)
x <- baked_data
x$type <- as.numeric(x$type) - 1
# Stratified small subset for readable axis labels (optional)
stratified_subset <- x %>%
initial_split(prop = 0.05, strata = type) %>%  # ~5% stratified sample
training() %>%
select(-type)
View(stratified_subset)
# Extract fitted xgboost model
XGB <- extract_fit_engine(xgb_fit)
# Prepare predictor matrix (same as used in model fitting)
x <- baked_data
x$type <- as.numeric(x$type) - 1
# Stratified small subset for readable axis labels (optional)
stratified_subset <- x %>%
initial_split(prop = 0.10, strata = type) %>%  # ~5% stratified sample
training() %>%
select(-type)
library(xgboost)
library(kernelshap)
library(shapviz)
# Extract fitted xgboost model
XGB <- extract_fit_engine(xgb_fit)
# Prepare predictor matrix (same as used in model fitting)
x <- baked_data
x$type <- as.numeric(x$type) - 1
# Stratified small subset for readable axis labels (optional)
stratified_subset <- x %>%
initial_split(prop = 0.10, strata = type) %>%  # ~5% stratified sample
training() %>%
select(-type)
# Matrix input for SHAP prediction (must match training format)
X_pred <- data.matrix(x %>% select(-type))
# Run SHAP
SHAP_viz_XGB <- shapviz(XGB, X_pred = X_pred, X = stratified_subset, interactions = TRUE)
View(X_pred)
View(XGB)
XGB
XGB[["feature_names"]]
XGB[["feature_names"]] == colnames(X_pred)
View(X_pred)
library(xgboost)
library(kernelshap)
library(shapviz)
# Extract fitted xgboost model
XGB <- extract_fit_engine(xgb_fit)
# Prepare predictor matrix (same as used in model fitting)
x <- baked_data
x$type <- as.numeric(x$type) - 1
# Stratified small subset for readable axis labels (optional)
stratified_subset <- x %>%
initial_split(prop = 0.10, strata = type) %>%  # ~5% stratified sample
training() %>%
select(-c("type","Weights"))
# Matrix input for SHAP prediction (must match training format)
X_pred <- data.matrix(x %>% select(-c("type","Weights")))
# Run SHAP
SHAP_viz_XGB <- shapviz(XGB, X_pred = X_pred, X = stratified_subset, interactions = TRUE)
View(X_pred)
# Create stratified subset including all needed features
stratified_subset <- x %>%
initial_split(prop = 0.10, strata = type) %>%
training() %>%
select(-c("type", "Weights"))
# Matrix for SHAP prediction for subset only
X_pred_subset <- data.matrix(stratified_subset)
# Then compute SHAP on subset
SHAP_viz_XGB <- shapviz(XGB, X_pred = X_pred_subset, X = stratified_subset, interactions = TRUE)
# Save SHAP importance (default plot) as PNG with 600 DPI
SHAP_XGB <- sv_importance(SHAP_viz_XGB, show_numbers = TRUE,max_display = 25) +
ggtitle("SHAP XGB importance Age") + theme_bw(base_size = 15)
SHAP_XGB$data <- SHAP_XGB$data |>
mutate(ind = recode(ind,
"Class_1" = "B",
"Class_2" = "PreB",
"Class_3" = "PreT",
"Class_4" = "T"))
SHAP_viz_XGB <- shapviz(XGB, X_pred = X_pred, X = x %>% select(-c("type","Weights")), interactions = TRUE)
# Save SHAP importance (default plot) as PNG with 600 DPI
SHAP_XGB <- sv_importance(SHAP_viz_XGB, show_numbers = TRUE,max_display = 25) +
ggtitle("SHAP XGB importance Age") + theme_bw(base_size = 15)
SHAP_XGB$data <- SHAP_XGB$data |>
mutate(ind = recode(ind,
"Class_1" = "B",
"Class_2" = "PreB",
"Class_3" = "PreT",
"Class_4" = "T"))
# Save SHAP importance (default plot) as PNG with 600 DPI
SHAP_XGB <- sv_importance(SHAP_viz_XGB, show_numbers = TRUE,max_display = 25) +
ggtitle("SHAP XGB importance Age") + theme_bw(base_size = 15)
SHAP_XGB
# Save SHAP importance (default plot) as PNG with 600 DPI
SHAP_XGB <- sv_importance(SHAP_viz_XGB, show_numbers = TRUE,max_display = 25) +
ggtitle("SHAP XGB importance Age") + theme_bw(base_size = 15)
SHAP_XGB
ggsave(plot = SHAP_XGB,filename = "output/figures/SHAP_XGB_total.png", width = 12,height = 8,dpi = 600)
SHAP_XGB_list <- SHAP_XGB[["data"]]
View(SHAP_XGB_list)
SHAP_XGB_list <- SHAP_XGB[["data"]] |>
tibble()
SHAP_XGB
write_csv(x = SHAP_XGB,file = "output/tables/SHAP_XGB_Age.csv")
SHAP_XGB_list <- SHAP_XGB[["data"]] |>
tibble()
SHAP_XGB_list
write_csv(x = SHAP_XGB_list,file = "output/tables/SHAP_XGB_Age.csv")
View(x)
View(train_data)
save.image("F:/ML/HS/Age_batch/output/objects/02_NEW_DRAFT.RData")
set.seed(RANDOM_SEED)
library(torch)
# Modern torch-based MLP - much faster and current
mlp_spec <- mlp(
hidden_units = tune(),
penalty = tune(),
epochs = tune()
) %>%
set_engine("torch") %>%
set_mode("classification")
show_engines("mlp")
brulee::schedule_decay_time()
# Define the vector of package names needed for the project
PACKAGES <- c(
"xgboost",         # Extreme Gradient Boosting algorithm for classification/regression
"ggplot2",         # Data visualization package based on the grammar of graphics
"RColorBrewer",    # Color palettes for enhanced data visualization
"tidymodels",      # Tidy modeling framework for machine learning workflows
"tidyverse",       # Collection of packages for data manipulation, analysis, and visualization
"finetune",        # Tools for model tuning and optimization
"themis",          # Techniques for handling class imbalance in machine learning
"gprofiler2",      # Gene enrichment and pathway analysis for gene lists
"future",          # Enables parallel processing for faster computations
"data.table",      # High-performance data manipulation package
"gt",              # For creating display tables
#"gtsummary",       # For summary tables with statistics and formatted output
"butcher",         # Reduces memory load of models by removing unnecessary objects
"UBL",              # Utility-based learning techniques for imbalanced data
"ranger",
"kernelshap",
"shapviz"
)
# Use purrr::walk to load all packages
purrr::walk(PACKAGES, library, character.only = TRUE)
gc()
plan(multisession, workers = 10)
nbrOfWorkers()
RANDOM_SEED <- 1234
#plan("multisession", workers = 15,)
#plan(multisession, workers = 15)
#plan(sequential)
load("F:/ML/HS/Age_batch/output/objects/02_NEW_DRAFT.RData")
library(stacks)
print(model_stack)
# Visualize the model weights
autoplot(model_stack, type = "performance")
autoplot(model_stack, type = "weights")
autoplot(model_stack, type = "members")
print(model_stack)
collect_parameters(model_stack, "RF_res")
collect_parameters(model_stack, "SVM_rbf_res")
library(ranger)
library(kernelshap)
library(rsample)
library(dplyr)
library(doFuture)
set.seed(1)
# --- Extract the fitted ranger model ---
rf_model <- extract_fit_engine(rf_fit)
# --- Prepare full feature matrix (exclude target and weights) ---
x <- train_data %>%
select(-Cell_type, -Weights)
library(ranger)
library(kernelshap)
library(rsample)
library(dplyr)
library(doFuture)
set.seed(1)
# --- Extract the fitted ranger model ---
rf_model <- extract_fit_engine(rf_fit)
# --- Prepare full feature matrix (exclude target and weights) ---
x <- train_data %>%
select(-type, -Weights)
# --- Prepare background dataset using stratified sampling (~5% of training set) ---
stratified_subset <- train_data %>%
initial_split(prop = 0.05, strata = type) %>%
training() %>%
select(-type, -Weights)
# --- Define prediction function returning probabilities for kernelshap ---
pred_fun <- function(object, newdata) {
predict(object, data = newdata)$predictions
}
# --- Parallel backend setup ---
registerDoFuture()
plan(multisession, workers = 5)
# --- Run Kernel SHAP ---
SHAP_kernel_RF <- kernelshap(
object = rf_model,
X = x,
bg_X = stratified_subset,
pred_fun = pred_fun
)
# Step 2: Turn them into a shapviz object
SHAP_viz_RF_age <- shapviz(SHAP_kernel_RF, interactions = TRUE)
saveRDS(SHAP_viz_RF_age, "output/objects/SHAP_viz_RF_age_model.RDS")
# Save SHAP importance (beeswarm plot) as PNG with 600 DPI and a title
plot_beeswarm <- sv_importance(SHAP_viz_RF, show_numbers = TRUE, kind = "beeswarm") & theme_bw(base_size = 15)
plot_beeswarm
# Save SHAP importance (beeswarm plot) as PNG with 600 DPI and a title
plot_beeswarm <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE, kind = "beeswarm") & theme_bw(base_size = 15)
plot_beeswarm
# Save SHAP importance (default plot) as PNG with 600 DPI
plot_default <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE,max_display = 15) +
ggtitle("SHAP Importance RF Subtype") + theme_bw(base_size = 20)
plot_default
+ theme_bw(base_size = 20) +
theme(legend.position = "bottom")
# Save SHAP importance (default plot) as PNG with 600 DPI
plot_default <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE,max_display = 15)
# Save SHAP importance (default plot) as PNG with 600 DPI
plot_default <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE,max_display = 15) +
theme_bw(base_size = 20) +
theme(legend.position = "bottom")
plot_default
vip(rf_model)
vip::vip(rf_model)
vip::vi(rf_model)
vip::vip(object = rf_model, ice = TRUE, train = x)
vip::vip(object = rf_model, method = "firm", ice = TRUE, train = x)
pak::pak("pdp")
vip::vip(object = rf_model, method = "firm", ice = TRUE, train = x)
vip(object = rf_model)
vip::vip(rf_model)
vip(object = rf_model,geom = "point")
#ICE <- vip::vip(object = rf_model, method = "firm", ice = TRUE, train = x)
library(vip)
vip(object = rf_model,geom = "point")
train_data$type
# Save SHAP importance (default plot) as PNG with 600 DPI
plot_default <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE,max_display = 15) +
theme_bw(base_size = 20) +
theme(legend.position = "bottom")
plot_default
# Save SHAP dependence plot for 'EBF1' as PNG with 600 DPI
plot_dependence <- sv_dependence(SHAP_viz_RF, v = "EBF1", color_var = "auto") & theme_bw(base_size = 15) # & geom_smooth(method = lm)
plot_dependence
# Save SHAP waterfall plot as PNG with 600 DPI
plot_waterfall <- sv_waterfall(SHAP_viz_RF_age) +
ggtitle("SHAP waterfall RF Subtype") & theme_bw(base_size = 15)
plot_waterfall
# Save SHAP waterfall plot as PNG with 600 DPI
plot_waterfall <- sv_waterfall(SHAP_viz_RF_age) & theme_bw(base_size = 15)
plot_waterfall
# Save SHAP waterfall plot as PNG with 600 DPI
plot_waterfall <- sv_waterfall(SHAP_viz_RF_age) & theme_bw(base_size = 12)
plot_waterfall
vip(object = extract_fit_engine(svm_rbf_fit),geom = "point")
# Save SHAP importance (beeswarm plot) as PNG with 600 DPI and a title
plot_beeswarm <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE, kind = "beeswarm") & theme_bw(base_size = 15)
plot_beeswarm
ggsave("SHAP/sv_importance_RF_Age_beeswarm.png", plot = plot_beeswarm, dpi = 600,width = 10,height = 6)
# Save SHAP importance (beeswarm plot) as PNG with 600 DPI and a title
plot_beeswarm <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE, kind = "beeswarm") & theme_bw(base_size = 15)
plot_beeswarm
ggsave("output/figures/sv_importance_RF_Age_beeswarm.png", plot = plot_beeswarm, dpi = 600,width = 10,height = 6)
# Save SHAP importance (default plot) as PNG with 600 DPI
plot_default <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE,max_display = 15) +
theme_bw(base_size = 20) +
theme(legend.position = "bottom")
plot_default
ggsave("output/figures/sv_importance_RF_age_default.png", plot = plot_default, dpi = 600,width = 10,height = 6)
# Save SHAP waterfall plot as PNG with 600 DPI
plot_waterfall <- sv_waterfall(SHAP_viz_RF_age) & theme_bw(base_size = 12)
plot_waterfall
ggsave("output/figures/sv_waterfall_RF_age.png", plot = plot_waterfall, dpi = 600,width = 10,height = 6)
# Save SHAP importance (beeswarm plot) as PNG with 600 DPI and a title
plot_beeswarm <- sv_importance(SHAP_viz_RF_age, show_numbers = TRUE, kind = "beeswarm",max_display = 5) & theme_bw(base_size = 15)
plot_beeswarm
ggsave("output/figures/sv_importance_RF_Age_beeswarm.png", plot = plot_beeswarm, dpi = 600,width = 10,height = 6)
View(plot_beeswarm)
plot_beeswarm[[2]]
ggsave("output/figures/sv_importance_RF_Age_beeswarm_P.png", plot = plot_beeswarm[[2]], dpi = 600,width = 10,height = 6)
# Save SHAP importance (beeswarm plot) as PNG with 600 DPI and a title
plot_beeswarm <- sv_importance(
SHAP_viz_RF_age,
show_numbers = TRUE,
kind = "beeswarm",
max_display = 5
) & theme_bw(base_size = 12)
# Extract individual subplots from patchwork
# Assuming plot_beeswarm is a 2-panel patchwork: beeswarm (1st), bar (2nd)
p1 <- plot_beeswarm[[1]]  # beeswarm plot
p2 <- plot_beeswarm[[2]]  # bar plot or secondary plot
# Modify second plot: remove x-axis label
p2 <- p2 + theme(axis.title.x = element_blank())
# Combine plots again with shared legend and layout adjustments
final_plot <- (p1 | p2) +
plot_layout(guides = "collect") +
plot_annotation(title = "Top 5 SHAP Feature Importances")
# Draw the final composed plot
final_plot
library(patchwork)
# Save SHAP importance (beeswarm plot) as PNG with 600 DPI and a title
plot_beeswarm <- sv_importance(
SHAP_viz_RF_age,
show_numbers = TRUE,
kind = "beeswarm",
max_display = 5
) & theme_bw(base_size = 12)
# Extract individual subplots from patchwork
# Assuming plot_beeswarm is a 2-panel patchwork: beeswarm (1st), bar (2nd)
p1 <- plot_beeswarm[[1]]  # beeswarm plot
p2 <- plot_beeswarm[[2]]  # bar plot or secondary plot
# Modify second plot: remove x-axis label
p2 <- p2 + theme(axis.title.x = element_blank())
# Combine plots again with shared legend and layout adjustments
final_plot <- (p1 | p2) +
plot_layout(guides = "collect") +
plot_annotation(title = "Top 5 SHAP Feature Importances")
# Draw the final composed plot
final_plot
library(patchwork)
# Save SHAP importance (beeswarm plot) as PNG with 600 DPI and a title
plot_beeswarm <- sv_importance(
SHAP_viz_RF_age,
show_numbers = TRUE,
kind = "beeswarm",
max_display = 5
) & theme_bw(base_size = 12)
# Extract individual subplots from patchwork
# Assuming plot_beeswarm is a 2-panel patchwork: beeswarm (1st), bar (2nd)
p1 <- plot_beeswarm[[1]]  # beeswarm plot
p2 <- plot_beeswarm[[2]]  # bar plot or secondary plot
# Modify second plot: remove x-axis label
p2 <- p2 + theme(axis.y = element_blank())
# Combine plots again with shared legend and layout adjustments
final_plot <- (p1 | p2) +
plot_layout(guides = "collect") +
plot_annotation(caption = "A")
# Draw the final composed plot
final_plot
library(patchwork)
library(ggplot2)
library(shapviz)
# Create the SHAP importance plot
plot_beeswarm <- sv_importance(
SHAP_viz_RF_age,
show_numbers = TRUE,
kind = "beeswarm",
max_display = 5
) & theme_bw(base_size = 12)
# Extract individual plots from patchwork
p1 <- plot_beeswarm[[1]]  # beeswarm
p2 <- plot_beeswarm[[2]]  # bar/summary
# Fully remove y-axis from second plot (p2)
p2 <- p2 + theme(
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y  = element_blank()
)
# Combine into final layout with shared legend
final_plot <- (p1 | p2) +
plot_layout(guides = "collect") +
plot_annotation(caption = "A")
# Show the plot
final_plot
library(patchwork)
library(ggplot2)
library(shapviz)
# Create the SHAP importance plot
plot_beeswarm <- sv_importance(
SHAP_viz_RF_age,
show_numbers = TRUE,
kind = "beeswarm",
max_display = 5
) & theme_bw(base_size = 12)
# Extract individual plots from patchwork
p1 <- plot_beeswarm[[1]]  # beeswarm
p2 <- plot_beeswarm[[2]]  # bar/summary
# Fully remove y-axis from second plot (p2)
p2 <- p2 + theme(
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y  = element_blank()
)
# Combine into final layout with shared legend
final_plot <- (p1 | p2) +
plot_layout(guides = "collect")
# Show the plot
final_plot
ggsave("output/figures/sv_importance_RF_Age_beeswarm.png", plot = final_plot, dpi = 600,width = 10,height = 6)
ggsave("output/figures/sv_importance_RF_Age_beeswarm.png", plot = final_plot, dpi = 600,width = 12,height = 6)
ggsave("output/figures/sv_importance_RF_Age_beeswarm2.png", plot = final_plot,device = svglite::svglite, width = 12, height = 6)
ggsave("output/figures/sv_importance_RF_Age_beeswarm2.svg", plot = final_plot,device = svglite::svglite, width = 12, height = 6)
